/**
 * @fileoverview gRPC-Web generated client stub for order
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.24.1
// source: order.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as order_pb from './order_pb';


export class OrderProviderClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetOrder = new grpcWeb.MethodDescriptor(
    '/order.OrderProvider/GetOrder',
    grpcWeb.MethodType.UNARY,
    order_pb.OrderRequest,
    order_pb.OrderResponse,
    (request: order_pb.OrderRequest) => {
      return request.serializeBinary();
    },
    order_pb.OrderResponse.deserializeBinary
  );

  getOrder(
    request: order_pb.OrderRequest,
    metadata: grpcWeb.Metadata | null): Promise<order_pb.OrderResponse>;

  getOrder(
    request: order_pb.OrderRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: order_pb.OrderResponse) => void): grpcWeb.ClientReadableStream<order_pb.OrderResponse>;

  getOrder(
    request: order_pb.OrderRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: order_pb.OrderResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/order.OrderProvider/GetOrder',
        request,
        metadata || {},
        this.methodDescriptorGetOrder,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/order.OrderProvider/GetOrder',
    request,
    metadata || {},
    this.methodDescriptorGetOrder);
  }

  methodDescriptorSubscribeOrder = new grpcWeb.MethodDescriptor(
    '/order.OrderProvider/SubscribeOrder',
    grpcWeb.MethodType.SERVER_STREAMING,
    order_pb.OrderCriteria,
    order_pb.Order,
    (request: order_pb.OrderCriteria) => {
      return request.serializeBinary();
    },
    order_pb.Order.deserializeBinary
  );

  subscribeOrder(
    request: order_pb.OrderCriteria,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<order_pb.Order> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/order.OrderProvider/SubscribeOrder',
      request,
      metadata || {},
      this.methodDescriptorSubscribeOrder);
  }

  methodDescriptorSubscribeFill = new grpcWeb.MethodDescriptor(
    '/order.OrderProvider/SubscribeFill',
    grpcWeb.MethodType.SERVER_STREAMING,
    order_pb.FillCriteria,
    order_pb.Fill,
    (request: order_pb.FillCriteria) => {
      return request.serializeBinary();
    },
    order_pb.Fill.deserializeBinary
  );

  subscribeFill(
    request: order_pb.FillCriteria,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<order_pb.Fill> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/order.OrderProvider/SubscribeFill',
      request,
      metadata || {},
      this.methodDescriptorSubscribeFill);
  }

}

export class OrderTransactionProviderClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorNewOrderTrans = new grpcWeb.MethodDescriptor(
    '/order.OrderTransactionProvider/NewOrderTrans',
    grpcWeb.MethodType.UNARY,
    order_pb.Order,
    order_pb.OrderId,
    (request: order_pb.Order) => {
      return request.serializeBinary();
    },
    order_pb.OrderId.deserializeBinary
  );

  newOrderTrans(
    request: order_pb.Order,
    metadata: grpcWeb.Metadata | null): Promise<order_pb.OrderId>;

  newOrderTrans(
    request: order_pb.Order,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: order_pb.OrderId) => void): grpcWeb.ClientReadableStream<order_pb.OrderId>;

  newOrderTrans(
    request: order_pb.Order,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: order_pb.OrderId) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/order.OrderTransactionProvider/NewOrderTrans',
        request,
        metadata || {},
        this.methodDescriptorNewOrderTrans,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/order.OrderTransactionProvider/NewOrderTrans',
    request,
    metadata || {},
    this.methodDescriptorNewOrderTrans);
  }

  methodDescriptorCancelOrderTrans = new grpcWeb.MethodDescriptor(
    '/order.OrderTransactionProvider/CancelOrderTrans',
    grpcWeb.MethodType.UNARY,
    order_pb.OrderId,
    order_pb.OrderId,
    (request: order_pb.OrderId) => {
      return request.serializeBinary();
    },
    order_pb.OrderId.deserializeBinary
  );

  cancelOrderTrans(
    request: order_pb.OrderId,
    metadata: grpcWeb.Metadata | null): Promise<order_pb.OrderId>;

  cancelOrderTrans(
    request: order_pb.OrderId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: order_pb.OrderId) => void): grpcWeb.ClientReadableStream<order_pb.OrderId>;

  cancelOrderTrans(
    request: order_pb.OrderId,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: order_pb.OrderId) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/order.OrderTransactionProvider/CancelOrderTrans',
        request,
        metadata || {},
        this.methodDescriptorCancelOrderTrans,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/order.OrderTransactionProvider/CancelOrderTrans',
    request,
    metadata || {},
    this.methodDescriptorCancelOrderTrans);
  }

  methodDescriptorNewFillTrans = new grpcWeb.MethodDescriptor(
    '/order.OrderTransactionProvider/NewFillTrans',
    grpcWeb.MethodType.UNARY,
    order_pb.Fill,
    order_pb.FillId,
    (request: order_pb.Fill) => {
      return request.serializeBinary();
    },
    order_pb.FillId.deserializeBinary
  );

  newFillTrans(
    request: order_pb.Fill,
    metadata: grpcWeb.Metadata | null): Promise<order_pb.FillId>;

  newFillTrans(
    request: order_pb.Fill,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: order_pb.FillId) => void): grpcWeb.ClientReadableStream<order_pb.FillId>;

  newFillTrans(
    request: order_pb.Fill,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: order_pb.FillId) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/order.OrderTransactionProvider/NewFillTrans',
        request,
        metadata || {},
        this.methodDescriptorNewFillTrans,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/order.OrderTransactionProvider/NewFillTrans',
    request,
    metadata || {},
    this.methodDescriptorNewFillTrans);
  }

}

